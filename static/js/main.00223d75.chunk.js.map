{"version":3,"sources":["pages/SignUpForm.jsx","pages/SignInForm.jsx","App.js","serviceWorker.js","index.js"],"names":["emailRegex","RegExp","SignUpForm","handleChange","e","target","name","formErrors","state","value","type","checked","username","length","email","test","password","confirmPassword","setState","console","log","handleSubmit","alert","rest","valid","Object","values","forEach","val","formValid","error","info","hasAgreed","this","className","onSubmit","htmlFor","id","placeholder","onChange","required","href","to","Component","SignInForm","preventDefault","App","basename","color","height","width","timeout","activeClassName","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.00223d75.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\r\nconst formValid = ({ formErrors, ...rest }) => {let valid = true;\r\n\r\n // validate form errors being empty\r\n  Object.values(formErrors).forEach(val => {val.length > 0 && (valid = false); });\r\n\r\n  // validate the form was filled out\r\n  Object.values(rest).forEach(val => {val.length === null && (valid = false); });\r\n\r\n  return valid;\r\n};\r\nclass SignUpForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: null,\r\n            email: null,\r\n            password:null,\r\n            confirmPassword:null,\r\n            hasAgreed: false,\r\n            formErrors: {\r\n            username: '',\r\n            email: '',\r\n            password:'',\r\n            confirmPassword:''\r\n        }\r\n    };\r\n  }\r\n    handleChange = e => {\r\n    let target = e.target\r\n    const name  = target.name;\r\n    let formErrors = { ...this.state.formErrors };\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    switch (name) {\r\n      case \"username\":formErrors.username = value.length < 3 ? \"Min 3 char. required\" : \"\";\r\n        break;\r\n      case \"email\":formErrors.email = emailRegex.test(value) ? \"\" : \"Invalid email address\";\r\n        break;\r\n      case \"password\": formErrors.password = value.length < 6 ? \"Min 6 char. required\" : \"\";\r\n        break;\r\n        case \"confirmPassword\": formErrors.confirmPassword = value.length < 6 ? \"Min 6 char. required\" : \"\";\r\n        break;\r\n        default:\r\n        break;\r\n        }\r\n    this.setState({ formErrors, [name]: value }, () => console.log(this.state));\r\n     };\r\n       handleSubmit = e => {\r\n        const { password, confirmPassword } = this.state;\r\n        if (password !== confirmPassword) {\r\n        alert(\"Passwords don't match\");\r\n        } \r\n        else if(formValid(this.state)) {\r\n        console.info('Valid Form')\r\n        }else{\r\n        console.error('Invalid Form')\r\n}}\r\n\r\n        render() {\r\n        const { formErrors } = this.state;\r\n        return (\r\n        <div className=\"FormCenter\">\r\n            <form onSubmit={this.handleSubmit} className=\"FormFields\">\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"name\">Username</label>\r\n                <input type=\"text\" id=\"name\" className=\"FormField__Input\" placeholder=\"Enter your username\" name=\"username\" value={this.state.username} onChange={this.handleChange}  required />\r\n              {formErrors.username.length > 0 && (<span className=\"errorMessage\">{formErrors.username}</span>)}\r\n              </div>\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\r\n                <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\r\n              {formErrors.email.length > 0 && (<span className=\"errorMessage\">{formErrors.email}</span>)}\r\n              </div>\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\r\n                {formErrors.password.length > 0 && (<span className=\"errorMessage\">{formErrors.password}</span>)}\r\n              </div>\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"password\">Confirm Password</label>\r\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"confirmPassword\" value={this.state.confirmPassword} onChange={this.handleChange} required />\r\n                {formErrors.confirmPassword.length > 0 && (<span className=\"errorMessage\">{formErrors.confirmPassword}</span>)}\r\n              </div>\r\n               <div className=\"FormField\">\r\n                <label className=\"FormField__CheckboxLabel\">\r\n                <input className=\"FormField__Checkbox\" type=\"checkbox\" name=\"hasAgreed\" value={this.state.hasAgreed} onChange={this.handleChange} required /> I agree all statements in <a href=\"\" className=\"FormField__TermsLink\">terms of service</a>\r\n                </label>\r\n              </div>\r\n              <div className=\"FormField\">\r\n               <button className=\"FormField__Button mr-20\">Sign Up</button> <Link to=\"/sign-in\" className=\"FormField__Link\">I'm already member</Link>\r\n              </div>\r\n          </form>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default SignUpForm;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\r\nconst formValid = ({ formErrors, ...rest }) => {let valid = true;\r\n\r\n // validate form errors being empty\r\n  Object.values(formErrors).forEach(val => {val.length > 0 && (valid = false); });\r\n\r\n  // validate the form was filled out\r\n  Object.values(rest).forEach(val => {val.length === null && (valid = false); });\r\n\r\n  return valid;\r\n};\r\nclass SignInForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: null,\r\n            password: null,\r\n            confirmPassword:null,\r\n            formErrors: {\r\n            email: '',\r\n            password:'',\r\n            confirmPassword:''\r\n        }\r\n    };\r\n  }        \r\n    handleChange = e => {\r\n    e.preventDefault();\r\n    const { name, value } = e.target;\r\n    let formErrors = { ...this.state.formErrors };\r\n  switch (name) {\r\n        case \"email\":formErrors.email = emailRegex.test(value) ? \"\" : \"Invalid email address\";\r\n        break;\r\n      case \"password\": formErrors.password = value.length < 6 ? \"Min 6 char. required\" : \"\";\r\n        break;\r\n        case \"confirmPassword\": formErrors.confirmPassword = value.length < 6 ? \"Min 6 char. required\" : \"\";\r\n        break;\r\n      default:\r\n        break;\r\n        }\r\n    this.setState({ formErrors, [name]: value }, () => console.log(this.state));\r\n  };\r\n     handleSubmit = e => {\r\n        const { password, confirmPassword } = this.state;\r\n        if (password !== confirmPassword) {\r\n        alert(\"Passwords don't match\");\r\n        } \r\n        else if(formValid(this.state)) {\r\n        console.info('Valid Form')\r\n        }else{\r\n        console.error('Invalid Form')\r\n       }\r\n       }\r\n      render() {\r\n        const { formErrors } = this.state;\r\n        return (\r\n        <div className=\"FormCenter\">\r\n            <form onSubmit={this.handleSubmit} className=\"FormFields\" onSubmit={this.handleSubmit} required >\r\n            <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\r\n                <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\r\n              {formErrors.email.length > 0 && (<span className=\"errorMessage\">{formErrors.email}</span>)}\r\n              </div>\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required  />\r\n               {formErrors.password.length > 0 && (<span className=\"errorMessage\">{formErrors.password}</span>)}\r\n              </div>\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"password\"> Confirm Password</label>\r\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"confirmPassword\" value={this.state.confirmPassword} onChange={this.handleChange} />\r\n                {formErrors.confirmPassword.length > 0 && (<span className=\"errorMessage\">{formErrors.confirmPassword}</span>)}\r\n              </div>\r\n              <div className=\"FormField\">\r\n              <button className=\"FormField__Button mr-20\">Sign In</button> <Link to=\"/\" className=\"FormField__Link\">Create an account</Link>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default SignInForm;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Link, NavLink } from 'react-router-dom';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\nimport SignUpForm from './pages/SignUpForm';\nimport SignInForm from './pages/SignInForm';\nimport './App.css';\n\n  class App extends Component {\n  render() {\n    return (\n    <Router basename=\"/react-auth-ui/\">\n    <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} timeout={3000}/>\n    <div className=\"App\">\n    <div className=\"App__Aside\">     \n    <div className=\"FormField_Asside\">\n    <label className=\"FormField__Label\" htmlFor=\"name\">First name</label>\n    <input type=\"text\" id=\"fname\" className=\"FormField__Input\" placeholder=\"Enter your first name\" name=\"fname\" required/>\n    </div>\n    <div className=\"FormField_Asside\">\n    <label className=\"FormField__Label\" htmlFor=\"name\">Last name</label>\n    <input type=\"text\" id=\"lname\" className=\"FormField__Input\" placeholder=\"Enter your last name\" name=\"lname\" required />\n    </div>\n    </div>\n     <div className=\"App__Form\">       \n     <div className=\"PageSwitcher\">\n     <NavLink to=\"/sign-in\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign In</NavLink>\n     <NavLink exact to=\"/\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign Up</NavLink>\n     </div>\n\n     <Route exact path=\"/\" component={SignUpForm}>\n       </Route>\n      <Route path=\"/sign-in\" component={SignInForm}>\n       </Route>\n       </div>\n       </div>\n      </Router>\n      );\n  }\n}\nexport default (App);\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}